require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { connectDB, saveUserTokens, getUserAccounts, removeAccount } = require('./database');
const { getAuthUrl, getTokensFromCode } = require('./gmailAuth');
const { startWatching, getHistoryChanges, getMessage } = require('./gmailWatcher');
const { extractVerificationCode } = require('./codeExtractor');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const app = express();
app.use(express.json());

const pendingAuths = new Map(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 
    'üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ Gmail –ø—Ä—è–º–æ –≤ Telegram.\n\n' +
    '*–ö–æ–º–∞–Ω–¥—ã:*\n' +
    '/add - –î–æ–±–∞–≤–∏—Ç—å Gmail –∞–∫–∫–∞—É–Ω—Ç\n' +
    '/list - –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n' +
    '/remove - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n' +
    '/help - –ü–æ–º–æ—â—å',
    { parse_mode: 'Markdown' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId,
    '*üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*\n\n' +
    '*1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞*\n' +
    '–ò—Å–ø–æ–ª—å–∑—É–π /add –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n' +
    '*2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è*\n' +
    '‚Ä¢ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ\n' +
    '‚Ä¢ –í–æ–π–¥–∏ –≤ Gmail\n' +
    '‚Ä¢ –†–∞–∑—Ä–µ—à–∏ –¥–æ—Å—Ç—É–ø\n' +
    '‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π –∫–æ–¥\n\n' +
    '*3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–æ–≤*\n' +
    '–ö–æ–¥—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n' +
    '*–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @your_support',
    { parse_mode: 'Markdown' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞
bot.onText(/\/add/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const { authUrl, oAuth2Client } = await getAuthUrl();
    pendingAuths.set(chatId, oAuth2Client);

    bot.sendMessage(chatId,
      'üîê *–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Gmail –∞–∫–∫–∞—É–Ω—Ç–∞:*\n\n' +
      '1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ\n' +
      '2Ô∏è‚É£ –í–æ–π–¥–∏ –≤ Gmail –∞–∫–∫–∞—É–Ω—Ç\n' +
      '3Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏ –¥–æ—Å—Ç—É–ø\n' +
      '4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ\n\n' +
      `[üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏](${authUrl})`,
      { 
        parse_mode: 'Markdown',
        disable_web_page_preview: true 
      }
    );
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ª–∏—á–∏–µ credentials.json');
    console.error(error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith('/')) return;

  if (pendingAuths.has(chatId)) {
    const loadingMsg = await bot.sendMessage(chatId, '‚è≥ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');

    try {
      const oAuth2Client = pendingAuths.get(chatId);
      const tokens = await getTokensFromCode(text, oAuth2Client);

      // –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const gmail = require('googleapis').google.gmail({ version: 'v1', auth: oAuth2Client });
      const profile = await gmail.users.getProfile({ userId: 'me' });
      const email = profile.data.emailAddress;

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      const historyId = await startWatching(tokens, email);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
      await saveUserTokens(chatId, email, tokens, historyId);

      pendingAuths.delete(chatId);

      await bot.deleteMessage(chatId, loadingMsg.message_id);
      bot.sendMessage(chatId, 
        `‚úÖ *Gmail –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n` +
        `üìß Email: \`${email}\`\n\n` +
        `–¢–µ–ø–µ—Ä—å –∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        { parse_mode: 'Markdown' }
      );
    } catch (error) {
      await bot.deleteMessage(chatId, loadingMsg.message_id);
      bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π /add —Å–Ω–æ–≤–∞.');
      pendingAuths.delete(chatId);
      console.error(error);
    }
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /list - —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
bot.onText(/\/list/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const accounts = await getUserAccounts(chatId);

    if (accounts.length === 0) {
      bot.sendMessage(chatId, 
        'üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    let message = '*üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:*\n\n';
    accounts.forEach((acc, index) => {
      const date = new Date(acc.addedAt).toLocaleDateString('ru-RU');
      message += `${index + 1}. \`${acc.email}\`\n   –î–æ–±–∞–≤–ª–µ–Ω: ${date}\n\n`;
    });

    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    console.error(error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /remove - —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
bot.onText(/\/remove/, async (msg) => {
  const chatId = msg.chat.id;

  try {
    const accounts = await getUserAccounts(chatId);

    if (accounts.length === 0) {
      bot.sendMessage(chatId, 'üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.');
      return;
    }

    const keyboard = accounts.map((acc, index) => [{
      text: `${index + 1}. ${acc.email}`,
      callback_data: `remove_${acc.email}`
    }]);

    keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_remove' }]);

    bot.sendMessage(chatId, 
      '*–í—ã–±–µ—Ä–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*',
      {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      }
    );
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
    console.error(error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data.startsWith('remove_')) {
    const email = data.replace('remove_', '');

    try {
      await removeAccount(chatId, email);
      bot.answerCallbackQuery(query.id, { text: '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω' });
      bot.editMessageText(
        `‚úÖ –ê–∫–∫–∞—É–Ω—Ç \`${email}\` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
        {
          chat_id: chatId,
          message_id: query.message.message_id,
          parse_mode: 'Markdown'
        }
      );
    } catch (error) {
      bot.answerCallbackQuery(query.id, { text: '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
      console.error(error);
    }
  } else if (data === 'cancel_remove') {
    bot.answerCallbackQuery(query.id);
    bot.deleteMessage(chatId, query.message.message_id);
  }
});

// Webhook –¥–ª—è Pub/Sub —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.post('/gmail-webhook', async (req, res) => {
  try {
    const message = req.body.message;
    if (!message || !message.data) {
      return res.status(400).send('Invalid message');
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = JSON.parse(Buffer.from(message.data, 'base64').toString());
    const { emailAddress, historyId } = data;

    console.log(`üì¨ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${emailAddress}, historyId: ${historyId}`);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º email
    const User = require('./database').User;
    const users = await User.find({ 'gmailAccounts.email': emailAddress });

    for (const user of users) {
      const account = user.gmailAccounts.find(acc => acc.email === emailAddress);
      if (!account) continue;

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const history = await getHistoryChanges(account.tokens, account.historyId);

      for (const historyItem of history) {
        if (historyItem.messagesAdded) {
          for (const msgAdded of historyItem.messagesAdded) {
            const message = await getMessage(account.tokens, msgAdded.message.id);
            const { codes, subject, from } = extractVerificationCode(message);

            if (codes.length > 0) {
              let botMessage = `üîë *–ù–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!*\n\n`;
              botMessage += `üìß –û—Ç: \`${from}\`\n`;
              botMessage += `üìù –¢–µ–º–∞: ${subject}\n\n`;
              botMessage += `*–ö–æ–¥—ã:* ${codes.map(c => \`\\`${c}\\`\`).join(', ')}`;

              await bot.sendMessage(user.telegramId, botMessage, { parse_mode: 'Markdown' });
              console.log(`‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}`);
            }
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º historyId
      await require('./database').updateHistoryId(user.telegramId, emailAddress, historyId);
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(500).send('Error');
  }
});

// Health check
app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –ó–∞–ø—É—Å–∫
async function start() {
  try {
    await connectDB();

    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
      console.log(`\n‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

start();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Unhandled rejection:', error);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught exception:', error);
});
